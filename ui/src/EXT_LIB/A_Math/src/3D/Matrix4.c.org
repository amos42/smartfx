#include "BaseDef.h"
#include "trifunc.h"
#include "vector3.h"
#include "MATRIX4.h"
#include "mem.h"


void MATRIX4_Set( MATRIX4 *m, REAL _11, REAL _12, REAL _13, REAL _14,
                              REAL _21, REAL _22, REAL _23, REAL _24,
                              REAL _31, REAL _32, REAL _33, REAL _34,
                              REAL _41, REAL _42, REAL _43, REAL _44 )
{
    m->_11 = _11; m->_12 = _12; m->_13 =_13; m->_14 = _14;
    m->_21 = _21; m->_22 = _22; m->_23 =_23; m->_24 = _24;
    m->_31 = _31; m->_32 = _32; m->_33 =_33; m->_34 = _34;
    m->_41 = _41; m->_42 = _42; m->_43 =_43; m->_44 = _44;
}


void MATRIX4_Identity( MATRIX4 *m )
{
    m->_12 = m->_13 = m->_14 = m->_21 = m->_23 = m->_24 = INTTOREAL(0);
    m->_31 = m->_32 = m->_34 = m->_41 = m->_42 = m->_43 = INTTOREAL(0);
    m->_11 = m->_22 = m->_33 = m->_44 = INTTOREAL(1);
}



void MATRIX4_SetTranslate( MATRIX4 *m, REAL tx, REAL ty, REAL tz )
{
	MATRIX4_Identity( m );

	m->_41 = tx;
	m->_42 = ty;
	m->_43 = tz;
}



void MATRIX4_SetTranslator2( MATRIX4 *m, COORD4 *v )
{
	MATRIX4_SetTranslate( m, v->x, v->y, v->z );
}



void MATRIX4_SetScale( MATRIX4 *m, REAL sx, REAL sy, REAL sz )
{
	MATRIX4_Identity( m );

	m->_11 = sx;
	m->_22 = sy;
	m->_33 = sz;
}


void MATRIX4_SetScale2( MATRIX4 *m, COORD4 *v )
{
	MATRIX4_SetScale( m, v->x, v->y, v->z );
}


// 회전값을 벡터와 곱해서 행렬에 저장한다.
void MATRIX4_SetRotateX( MATRIX4 *m, INT angle )
{
    REAL c, s;

    if( angle < 0 ) angle += MAX_ANGLE;

    c = COS(angle);
    s = SIN(angle);

	m->_11 = INTTOREAL(1);
    m->_12 = 0;
    m->_13 = 0;
    m->_14 = 0;

    m->_21 = 0;
    m->_22 = c;
    m->_23 = s;
    m->_24 = 0;

    m->_31 = 0;
    m->_32 = -s;
    m->_33 = c;
    m->_34 = 0;

	m->_41 = 0;
	m->_42 = 0;
	m->_43 = 0;
	m->_44 = INTTOREAL(1);
}


// 회전값을 벡터와 곱해서 행렬에 저장한다.
void MATRIX4_SetRotateY( MATRIX4 *m, INT angle )
{
    REAL c, s;

    if( angle < 0 ) angle += MAX_ANGLE;

    c = COS(angle);
    s = SIN(angle);

	m->_11 = c;
    m->_12 = 0;
    m->_13 = -s;
    m->_14 = 0;

    m->_21 = 0;
    m->_22 = INTTOREAL(1);
    m->_23 = 0;
    m->_24 = 0;

    m->_31 = s;
    m->_32 = 0;
    m->_33 = c;
    m->_34 = 0;

	m->_41 = 0;
	m->_42 = 0;
	m->_43 = 0;
	m->_44 = INTTOREAL(1);
}



// 회전값을 벡터와 곱해서 행렬에 저장한다.
void MATRIX4_SetRotateZ( MATRIX4 *m, INT angle )
{
    REAL c, s;

    if( angle < 0 ) angle += MAX_ANGLE;

    c = COS(angle);
    s = SIN(angle);

	m->_11 = c;
    m->_12 = s;
    m->_13 = 0;
    m->_14 = 0;

    m->_21 = -s;
    m->_22 = c;
    m->_23 = 0;
    m->_24 = 0;

    m->_31 = 0;
    m->_32 = 0;
    m->_33 = INTTOREAL(1);
    m->_34 = 0;

	m->_41 = 0;
	m->_42 = 0;
	m->_43 = 0;
	m->_44 = INTTOREAL(1);
}


void MATRIX4_Add( MATRIX4 *q, MATRIX4 *a, MATRIX4 *b )
{
    int i, j;
    REAL *pA = (REAL *)a->m;
    REAL *pB = (REAL *)b->m;
    REAL *pM = (REAL *)q->m;

    for( i = 0; i < 4; i++ )
      for( j = 0; j < 4; j++ )
        pM[4*i+j] = pA[4*i+j] + pB[4*i+j];
}


//-----------------------------------------------------------------------------
// Name: D3DMath_MATRIX4Multiply()
// Desc: Does the MATRIX4 operation: [Q] = [A] * [B].
// 두 행렬의 계산 결과를 돌려준다.
//-----------------------------------------------------------------------------
void MATRIX4_Multiply( MATRIX4 *q, MATRIX4 *a, MATRIX4 *b )
{
    int i, j, k;
    REAL *pA = (REAL *)a->m;
    REAL *pB = (REAL *)b->m;
    REAL *pM = (REAL *)q->m;

    memset( pM, 0, sizeof(MATRIX4) );

    for( i = 0; i < 4; i++ )
      for( j = 0; j < 4; j++ )
        for( k = 0; k < 4; k++ )
          pM[4*i+j] += REALMUL( pA[4*k+j], pB[4*i+k] );
}


void MATRIX4_Multiply2( MATRIX4 *m, COORD4 *d, COORD4 *s )
{
    REAL x = REALMUL(s->x, m->_11) + REALMUL(s->y, m->_21) + REALMUL(s->z, m->_31) + m->_41;
    REAL y = REALMUL(s->x, m->_12) + REALMUL(s->y, m->_22) + REALMUL(s->z, m->_32) + m->_42;
    REAL z = REALMUL(s->x, m->_13) + REALMUL(s->y, m->_23) + REALMUL(s->z, m->_33) + m->_43;

    d->x = x;
    d->y = y;
    d->z = z;
}



#if 0

//-----------------------------------------------------------------------------
// Name: D3DMath_MATRIX4Invert()
// Desc: Does the MATRIX4 operation: [Q] = inv[A]. Note: this function only
//       works for matrices with [0 0 0 1] for the 4th column.
//-----------------------------------------------------------------------------
int MATRIX4_Invert( MATRIX4 *q, MATRIX4 *a )
{
	MATRIX4	TempMat;

    if( ABS(a->_44 - INTTOREAL(1)) > .001f)
        return 1;

    if( ABS(a->_14) > .001f || ABS(a->_24) > .001f || ABS(a->_34) > .001f )
        return 1;

    REAL fDetInv = 1.0f / ( a->_11 * ( a->_22 * a->_33 - a->_23 * a->_32 ) -
                             a->_12 * ( a->_21 * a->_33 - a->_23 * a->_31 ) +
                             a->_13 * ( a->_21 * a->_32 - a->_22 * a->_31 ) );

	/*
    q->_11 =  fDetInv * ( a->_22 * a->_33 - a->_23 * a->_32 );
    q->_12 = -fDetInv * ( a->_12 * a->_33 - a->_13 * a->_32 );
    q->_13 =  fDetInv * ( a->_12 * a->_23 - a->_13 * a->_22 );
    q->_14 = 0.0f;

    q->_21 = -fDetInv * ( a->_21 * a->_33 - a->_23 * a->_31 );
    q->_22 =  fDetInv * ( a->_11 * a->_33 - a->_13 * a->_31 );
    q->_23 = -fDetInv * ( a->_11 * a->_23 - a->_13 * a->_21 );
    q->_24 = 0.0f;

    q->_31 =  fDetInv * ( a->_21 * a->_32 - a->_22 * a->_31 );
    q->_32 = -fDetInv * ( a->_11 * a->_32 - a->_12 * a->_31 );
    q->_33 =  fDetInv * ( a->_11 * a->_22 - a->_12 * a->_21 );
    q->_34 = 0.0f;

    q->_41 = -( a->_41 * q->_11 + a->_42 * q->_21 + a->_43 * q->_31 );
    q->_42 = -( a->_41 * q->_12 + a->_42 * q->_22 + a->_43 * q->_32 );
    q->_43 = -( a->_41 * q->_13 + a->_42 * q->_23 + a->_43 * q->_33 );
    q->_44 = 1.0f;
	*/

	Tempmat->_11 =  fDetInv * ( a->_22 * a->_33 - a->_23 * a->_32 );
    Tempmat->_12 = -fDetInv * ( a->_12 * a->_33 - a->_13 * a->_32 );
    Tempmat->_13 =  fDetInv * ( a->_12 * a->_23 - a->_13 * a->_22 );
    Tempmat->_14 = 0.0f;

    Tempmat->_21 = -fDetInv * ( a->_21 * a->_33 - a->_23 * a->_31 );
    Tempmat->_22 =  fDetInv * ( a->_11 * a->_33 - a->_13 * a->_31 );
    Tempmat->_23 = -fDetInv * ( a->_11 * a->_23 - a->_13 * a->_21 );
    Tempmat->_24 = 0.0f;

    Tempmat->_31 =  fDetInv * ( a->_21 * a->_32 - a->_22 * a->_31 );
    Tempmat->_32 = -fDetInv * ( a->_11 * a->_32 - a->_12 * a->_31 );
    Tempmat->_33 =  fDetInv * ( a->_11 * a->_22 - a->_12 * a->_21 );
    Tempmat->_34 = 0.0f;

    Tempmat->_41 = -( a->_41 * Tempmat->_11 + a->_42 * Tempmat->_21 + a->_43 * Tempmat->_31 );
    Tempmat->_42 = -( a->_41 * Tempmat->_12 + a->_42 * Tempmat->_22 + a->_43 * Tempmat->_32 );
    Tempmat->_43 = -( a->_41 * Tempmat->_13 + a->_42 * Tempmat->_23 + a->_43 * Tempmat->_33 );
    Tempmat->_44 = 1.0f;

	memcpy(&q, &TempMat, sizeof(MATRIX4));

    return 0;
}

#endif




#if 0

//-----------------------------------------------------------------------------
// Name: D3DMath_VectorMATRIX4Multiply()
// Desc: Multiplies a VECTOR3 by a MATRIX4
//-----------------------------------------------------------------------------
int MATRIX4_VectorMultiply( VECTOR3 *vDest, VECTOR3 *vSrc, MATRIX4 *mat )
{
    REAL x = REALMUL(vSrc->I, mat->_11) + REALMUL(vSrc->J, mat->_21) + REALMUL(vSrc->K, mat->_31) + mat->_41;
    REAL y = REALMUL(vSrc->I, mat->_12) + REALMUL(vSrc->J, mat->_22) + REALMUL(vSrc->K, mat->_32) + mat->_42;
    REAL z = REALMUL(vSrc->I, mat->_13) + REALMUL(vSrc->J, mat->_23) + REALMUL(vSrc->K, mat->_33) + mat->_43;
    REAL w = REALMUL(vSrc->I, mat->_14) + REALMUL(vSrc->J, mat->_24) + REALMUL(vSrc->K, mat->_34) + mat->_44;

//    if( ABS( w ) < g_EPSILON )
//        return E_INVALIDARG;

    vDest->I = REALDIV(x, w);
    vDest->J = REALDIV(y, w);
    vDest->K = REALDIV(z, w);

//    return S_OK;
}


//-----------------------------------------------------------------------------
// Name: D3DMath_VertexMATRIX4Multiply()
// Desc: Multiplies a vertex by a MATRIX4
//-----------------------------------------------------------------------------
int MATRIX4_VertexMultiply2( VERTEX *vDest, VERTEX *vSrc, MATRIX4 *mat )
{
    HRESULT    hr;
    VECTOR3 *pSrcVec  = (VECTOR3 *)vSrc;
    VECTOR3 *pDestVec = (VECTOR3 *)vDest;

    if( MATRIX4_VectorMultiply( pDestVec, pSrcVec, mat ) ) ){
        pSrcVec  = (VECTOR3 )&vSrc.nx;
        pDestVec = (VECTOR3 )&vDest.nx;
        hr = MATRIX4_VectorMultiply( DestVec, pSrcVec, mat );
    }

    return hr;
}

#endif




#if 0


//-----------------------------------------------------------------------------
// Name: D3DMath_QuaternionFromRotation()
// Desc: Converts a normalized axis and angle to a unit quaternion.
//-----------------------------------------------------------------------------
VOID D3DMath_QuaternionFromRotation( REAL *x, REAL *y, REAL *z, REAL *w,
                                     VECTOR3 *v, REAL fTheta )
{
    REAL sinValue = (REAL)sin(fTheta/2);
    *x = sinValue * v->I;
    *y = sinValue * v->J;
    *z = sinValue * v->K;
    *w = (REAL)cos(fTheta/2);
}



//-----------------------------------------------------------------------------
// Name: D3DMath_RotationFromQuaternion()
// Desc: Converts a normalized axis and angle to a unit quaternion.
//-----------------------------------------------------------------------------
VOID D3DMath_RotationFromQuaternion( VECTOR3 *v, REAL *fTheta,
                                     REAL x, REAL y, REAL z, REAL w )

{
    //fTheta = (REAL)( acos(w) * 2 );
    //v->I    = (REAL)( x / sin(fTheta/2) );
    //v->J    = (REAL)( y / sin(fTheta/2) );
    //v->K    = (REAL)( z / sin(fTheta/2) );

	REAL sinValue = REALDIV( INTTOREAL(1), SIN(fTheta / 2) );
    fTheta = (REAL)( acos(w) * 2 );
    v->I    = (REAL)( x * sinValue );
    v->J    = (REAL)( y * sinValue );
    v->K    = (REAL)( z * sinValue );
}




//-----------------------------------------------------------------------------
// Name: D3DMath_QuaternionFromAngles()
// Desc: Converts euler angles to a unit quaternion.
//-----------------------------------------------------------------------------
VOID D3DMath_QuaternionFromAngles( REAL& x, REAL& y, REAL& z, REAL& w,
                                   REAL fYaw, REAL fPitch, REAL fRoll )

{
    REAL fSinYaw   = SIN(fYaw/2);
    REAL fSinPitch = SIN(fPitch/2);
    REAL fSinRoll  = SIN(fRoll/2);
    REAL fCosYaw   = SIN(fYaw/2);
    REAL fCosPitch = SIN(fPitch/2);
    REAL fCosRoll  = SIN(fRoll/2);

    x = fSinRoll * fCosPitch * fCosYaw - fCosRoll * fSinPitch * fSinYaw;
    y = fCosRoll * fSinPitch * fCosYaw + fSinRoll * fCosPitch * fSinYaw;
    z = fCosRoll * fCosPitch * fSinYaw - fSinRoll * fSinPitch * fCosYaw;
    w = fCosRoll * fCosPitch * fCosYaw + fSinRoll * fSinPitch * fSinYaw;
}







//-----------------------------------------------------------------------------
// Name: D3DMath_MATRIX4FromQuaternion()
// Desc: Converts a unit quaternion into a rotation MATRIX4.
//-----------------------------------------------------------------------------
VOID D3DMath_MATRIX4FromQuaternion( MATRIX4 *mat, REAL x, REAL y, REAL z, REAL w )
{
    REAL xx = x*x; REAL yy = y*y; REAL zz = z*z;
    REAL xy = x*y; REAL xz = x*z; REAL yz = y*z;
    REAL wx = w*x; REAL wy = w*y; REAL wz = w*z;

    mat->_11 = 1 - 2 * ( yy + zz );
    mat->_12 =     2 * ( xy - wz );
    mat->_13 =     2 * ( xz + wy );

    mat->_21 =     2 * ( xy + wz );
    mat->_22 = 1 - 2 * ( xx + zz );
    mat->_23 =     2 * ( yz - wx );

    mat->_31 =     2 * ( xz - wy );
    mat->_32 =     2 * ( yz + wx );
    mat->_33 = 1 - 2 * ( xx + yy );

    mat->_14 = mat->_24 = mat->_34 = 0.0f;
    mat->_41 = mat->_42 = mat->_43 = 0.0f;
    mat->_44 = 1.0f;
}




//-----------------------------------------------------------------------------
// Name: D3DMath_QuaternionFromMATRIX4()
// Desc: Converts a rotation MATRIX4 into a unit quaternion.
//-----------------------------------------------------------------------------
VOID D3DMath_QuaternionFromMATRIX4( REAL *x, REAL *y, REAL *z, REAL& w, MATRIX4 *mat )
{
    if( mat->_11 + mat->_22 + mat->_33 > 0.0f )
    {
        REAL s = (REAL)sqrt( mat->_11 + mat->_22 + mat->_33 + mat->_44 );

        *x = (mat->_23-mat->_32) / (2*s);
        *y = (mat->_31-mat->_13) / (2*s);
        *z = (mat->_12-mat->_21) / (2*s);
        *w = 0.5f * s;
    } else {


    }
    REAL xx = x*x; REAL yy = y*y; REAL zz = z*z;
    REAL xy = x*y; REAL xz = x*z; REAL yz = y*z;
    REAL wx = w*x; REAL wy = w*y; REAL wz = w*z;

    mat->_11 = 1 - 2 * ( yy + zz );
    mat->_12 =     2 * ( xy - wz );
    mat->_13 =     2 * ( xz + wy );

    mat->_21 =     2 * ( xy + wz );
    mat->_22 = 1 - 2 * ( xx + zz );
    mat->_23 =     2 * ( yz - wx );

    mat->_31 =     2 * ( xz - wy );
    mat->_32 =     2 * ( yz + wx );
    mat->_33 = 1 - 2 * ( xx + yy );

    mat->_14 = mat->_24 = mat->_34 = 0.0f;
    mat->_41 = mat->_42 = mat->_43 = 0.0f;
    mat->_44 = 1.0f;
}




//-----------------------------------------------------------------------------
// Name: D3DMath_QuaternionMultiply()
// Desc: Mulitples two quaternions together as in {Q} = {A} * {B}.
//-----------------------------------------------------------------------------
VOID D3DMath_QuaternionMultiply( REAL *Qx, REAL *Qy, REAL *Qz, REAL *Qw,
                                  REAL Ax, REAL Ay, REAL Az, REAL Aw,
                                  REAL Bx, REAL By, REAL Bz, REAL Bw )
{
	REAL Dx = Bw*Ax + Bx*Aw + By*Az - Bz*Ay;
    REAL Dy = Bw*Ay + By*Aw + Bz*Ax - Bx*Az;
    REAL Dz = Bw*Az + Bz*Aw + Bx*Ay - By*Ax;
    REAL Dw = Bw*Aw - Bx*Ax - By*Ay - Bz*Az;

    *Qx = Dx; *Qy = Dy; *Qz = Dz; *Qw = Dw;
}




//-----------------------------------------------------------------------------
// Name: D3DMath_SlerpQuaternions()
// Desc: Compute a quaternion which is the spherical linear interpolation
//       between two other quaternions by dvFraction.
//-----------------------------------------------------------------------------
VOID D3DMath_QuaternionSlerp( REAL& Qx, REAL& Qy, REAL& Qz, REAL& Qw,
                              REAL Ax, REAL Ay, REAL Az, REAL Aw,
                              REAL Bx, REAL By, REAL Bz, REAL Bw,
                              REAL fAlpha )
{
    REAL fScale1;
    REAL fScale2;

    // Compute dot product, aka cos(theta):
    REAL fCosTheta = Ax*Bx + Ay*By + Az*Bz + Aw*Bw;

    if( fCosTheta < 0.0f )
    {
        // Flip start quaternion
		Ax = -Ax; Ay = -Ay; Az = -Az; Aw = -Aw;
        fCosTheta = -fCosTheta;
    }

    if( fCosTheta + 1.0f > 0.05f )
    {
        // If the quaternions are close, use linear interploation
        if( 1.0f - fCosTheta < 0.05f )
        {
            fScale1 = 1.0f - fAlpha;
            fScale2 = fAlpha;
        }
        else // Otherwise, do spherical interpolation
        {
            REAL fTheta    = (REAL)acos( fCosTheta );
            REAL fSinTheta = (REAL)sin( fTheta );

            fScale1 = (REAL)sin( fTheta * (1.0f-fAlpha) ) / fSinTheta;
            fScale2 = (REAL)sin( fTheta * fAlpha ) / fSinTheta;
        }
    }
    else
    {
        Bx = -Ay;
        By =  Ax;
        Bz = -Aw;
        Bw =  Az;

		fScale1 = (REAL)sin( g_PI_DIV_2 * (1.0f - fAlpha) );
        fScale2 = (REAL)sin( g_PI_DIV_2 * fAlpha );
    }

    Qx = fScale1 * Ax + fScale2 * Bx;
    Qy = fScale1 * Ay + fScale2 * By;
    Qz = fScale1 * Az + fScale2 * Bz;
    Qw = fScale1 * Aw + fScale2 * Bw;
}


#endif




// 회전값을 벡터와 곱해서 행렬에 저장한다.
void MATRIX4_GenerateRotator( MATRIX4 *Result, REAL Angle, REAL x, REAL y, REAL z )
{
    VECTOR3  Vector;
    REAL	cos, sin;
    REAL	a, b, c;

    Vector.I = x;
    Vector.J = y;
    Vector.K = z;

	VECTOR3_Normalize( &Vector );

    sin = (REAL)SIN( Angle / 2 );
    cos = (REAL)COS( Angle / 2 );

    a = REALMUL( Vector.I, sin );
    b = REALMUL( Vector.J, sin );
    c = REALMUL( Vector.K, sin );


	Result->_11 = INTTOREAL(1) - 2 * (REALMUL(b,b) + REALMUL(c,c));
    Result->_21 =           	 2 * (REALMUL(a,b) - REALMUL(cos,c));
    Result->_31 =	             2 * (REALMUL(a,c) + REALMUL(cos,b));

    Result->_12 =	             2 * (REALMUL(a,b) + REALMUL(cos,c));
    Result->_22 = INTTOREAL(1) - 2 * (REALMUL(a,a) + REALMUL(c,c));
    Result->_32 =	             2 * (REALMUL(b,c) - REALMUL(cos,a));

    Result->_13 =	             2 * (REALMUL(a,c) - REALMUL(cos,b));
    Result->_23 =	             2 * (REALMUL(b,c) + REALMUL(cos,a));
    Result->_33 = INTTOREAL(1) - 2 * (REALMUL(a,a) + REALMUL(b,b));

	Result->_14 = Result->_24 = Result->_34 = INTTOREAL(0);

	Result->_41 = Result->_42 = Result->_43 = INTTOREAL(0);
    Result->_44 = INTTOREAL(1);
}



/*
#define F1 (INTTOREAL(1))

// 회전값을 벡터와 곱해서 행렬에 저장한다.
void MATRIX_GenerateRotator( MATRIX4 *Result, REAL Angle, REAL x, REAL y, REAL z )
{
    VECTOR	Vector;
    REAL		cos, sin;
    REAL		a, b, c;

    Vector.I = x;
    Vector.J = y;
    Vector.K = z;

	VECTOR3_Normalize( &VECTOR3 );

    sin = (REAL)SIN( Angle );
    cos = (REAL)COS( Angle );

    MATRIX4_Set( &mrx, F1, 0, 0, 0,
                       cos, sin, 0,


    a = REALMUL( Vector.I, sin );
    b = REALMUL( Vector.J, sin );
    c = REALMUL( Vector.K, sin );


	Result->_11 = INTTOREAL(1) - 2 * (REALMUL(b,b) + REALMUL(c,c));
    Result->_21 =	 2 * (REALMUL(a,b) - REALMUL(cos,c));
    Result->_31 =	 2 * (REALMUL(a,c) + REALMUL(cos,b));

    Result->_12 =	 2 * (REALMUL(a,b) + REALMUL(cos,c));
    Result->_22 = INTTOREAL(1) - 2 * (REALMUL(a,a) + REALMUL(c,c));
    Result->_32 =	 2 * (REALMUL(b,c) - REALMUL(cos,a));

    Result->_13 =	 2 * (REALMUL(a,c) - REALMUL(cos,b));
    Result->_23 =	 2 * (REALMUL(b,c) + REALMUL(cos,a));
    Result->_33 = INTTOREAL(1) - 2 * (REALMUL(a,a) + REALMUL(b,b));

	Result->_14 = Result->_24 = Result->_34 = INTTOREAL(0);

	Result->_41 = Result->_42 = Result->_43 = INTTOREAL(0);
    Result->_44 = INTTOREAL(1);
}

*/

